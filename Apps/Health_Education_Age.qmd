---
title: "The relationship between health, education, and age"
format:
  html:
    grid: 
      body-width: 1300px
    resources: 
      - shinylive-sw.js
filters:
  - shinylive
---

```{shinylive-r}
#| standalone: true
#| viewerHeight: 600
library(shiny)
library(dplyr)
library(purrr)
library(jsonify)
library(ggplot2)

# load the data
gh_data<-readr::read_csv("https://raw.githubusercontent.com/andersen-hecon/empirical_health_econ/main/Datasets/brfss_gh_age.csv")

gh_levels<-c("Excellent",
             "Very Good",
             "Good",
             "Fair",
             "Poor")


educa_levels=c(
  "Kindgarten or less",
  "Grades 1-8",
  "Grades 9-11",
  "Less than high school",
  "High school or GED",
  "Some college",
  "College or more"
)

age5yr=c(
  "18-24",
  "25-29",
  "30-34",
  "35-39",
  "40-44",
  "45-49",
  "50-54",
  "55-59",
  "60-64",
  "65-69",
  "70-74",
  "75-79",
  "80+")

gh_data<-
  gh_data|>
  mutate(genhealth_num=map_dbl(genhlth,~which(.==gh_levels)))


# Define UI for app that draws a histogram ----
ui <- fluidPage(
  titlePanel("Self-rated health by age and education"),
  # Sidebar layout with input and output definitions ----
  sidebarLayout(
    
    # Sidebar panel for inputs ----
    sidebarPanel(
      
      # Input: check boxes for the education levels to include
      checkboxGroupInput(
        "educa",
        "Education levels",
        c(
          # "Kindgarten or less",
          # "Grades 1-8",
          # "Grades 9-11",
          "Less than high school",
          "High school or GED",
          "Some college",
          "College or more" 
        )
      ),
      radioButtons(
        "health_cut",
        "Cutoff for health",
        choices=gh_levels
      )
      
    ),
    
    # Main panel for displaying outputs ----
    mainPanel(
      # 
      # # Output: Histogram ----
      # ,
      textOutput("selected_vars"),
     
      tabsetPanel(
                 tabPanel("Distribution of health",plotOutput(outputId = "distPlot")),
                 tabPanel("Mean health by age",plotOutput(outputId = "meanPlot")),
                 tabPanel("Mean health by age and education",plotOutput(outputId = "mean_by_EdPlot")),
                 tabPanel("Table",tableOutput(outputId = "table"))
      )
      
      
       
    )
  )
)

# Define server logic required to draw a histogram ----
server <- function(input, output) {
  
  # This expression that generates a histogram is wrapped in a call
  # to renderPlot to indicate that:
  #
  # 1. It is "reactive" and therefore should be automatically
  #    re-executed when inputs (input$bins) change
  # 2. Its output type is a plot
  output$distPlot <- renderPlot({
    
    d<-gh_data
    
    if(paste(input$educa,collapse=", ") != "") {
      d<-
        d|>filter(educa %in% input$educa)
    }
    
    d<-
      d|>
      summarize(n=sum(n),.by=c(genhlth,`_ageg5yr`))|>
      mutate(p=prop.table(n),.by=`_ageg5yr`)
    
    ggplot(d,
           aes(x=`_ageg5yr`,y=p,
               fill=factor(genhlth,levels=gh_levels)
           )
           )+
      geom_col()+
      guides(fill=guide_legend(title=element_blank(),position = "bottom"))+
      xlab("Age")+ylab("Proportion")+
      scale_y_continuous(limits=c(0,NA))
    
  })
  
  output$meanPlot <- renderPlot({
    
    d<-gh_data
    
    if(paste(input$educa,collapse=", ") != "") {
      d<-
        d|>filter(educa %in% input$educa)
    }
    
    d<-
      d|>
      mutate(
        g=genhealth_num<=
          which(input$health_cut==gh_levels)
      )|>
      summarize(n=sum(n),.by=c(g,`_ageg5yr`))|>
      mutate(p=prop.table(n),.by=`_ageg5yr`)|>
      filter(g)

    ggplot(d,
           aes(x=factor(`_ageg5yr`,levels=age5yr),y=p, group=g
               )
           )+
      geom_point()+
      geom_line()+
      xlab("Age")+ylab("Proportion")+
      scale_y_continuous(limits=c(0,NA))
    
  })
  
  output$mean_by_EdPlot <- renderPlot({
    
    d<-gh_data
    
    if(paste(input$educa,collapse=", ") != "") {
      d<-
        d|>filter(educa %in% input$educa)
    }
    
    d<-
      d|>
      mutate(
        g=genhealth_num<=
          which(input$health_cut==gh_levels)
      )|>
      summarize(n=sum(n),.by=c(g,`_ageg5yr`,educa))|>
      mutate(p=prop.table(n),.by=`_ageg5yr`,educa)|>
      filter(g)

    ggplot(d,
           aes(x=factor(`_ageg5yr`,levels=age5yr),y=p, color=factor(educa,levels=educa_levels), group=factor(educa,levels=educa_levels)
               )
           )+
      geom_point()+
      geom_line()+
      guides(color=guide_legend(title=element_blank(),position = "bottom"))+
      xlab("Age")+ylab("Proportion")+
      scale_y_continuous(limits=c(0,NA))
    
  })
  
  output$table=renderTable({
    d<-gh_data
    
    if(paste(input$educa,collapse=", ") != "") {
      d<-
        d|>filter(educa %in% input$educa)
    }
    
    d<-
      d|>
      summarize(n=sum(n),.by=c(genhlth,`_ageg5yr`))|>
      mutate(p=prop.table(n),.by=`_ageg5yr`)|>
      select(name=genhlth,`_ageg5yr`,value=p)|>
      tidyr::pivot_wider()|>
      select(
        Age=`_ageg5yr`,
        any_of(gh_levels)
      )
    
    return(d)
      
  }
  )
  
  output$selected_vars<-renderText((
    paste(input$educa,collapse=", ")
  ))
}

# Create Shiny app ----
shinyApp(ui = ui, server = server)
```

